@page "/category"

@inject ICategoryRepository _categoryRepository;
@inject IJSRuntime _jsRuntime;

<DeleteConfirmation OnDeleteConfirmed="ConfirmDelete_Clicked" IsParentComponentProcessing=@IsLoading/>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>

    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>

    <div class="col-12">
        @if(Categories.Any())
        {
            <table class="table table-bordered my-4">
                <tr>
                    <th>Category Name</th>
                    <th>Actions</th>
                </tr>
                <tbody>
                    @foreach (var category in Categories)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>
                                <NavLink href="@($"category/edit/{category.Id}")" class="btn btn-primary" style="width:80px;">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(category.Id)" style="width:80px;">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                // loading GIF is displayed here.
                <div class="text-center">
                    <img src="/images/loading.gif"/ width="200px" height="200px">
                </div>
            }
            else
            {
                // no records in the DB.
                <p> No records found. </p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; } = true;
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadCategories);
    }

    private void LoadCategories()
    {
        Categories = _categoryRepository.GetAll();
        IsLoading = false;
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async void ConfirmDelete_Clicked()
    {
        IsLoading = true;

        // The line below is for dev testing.
        //await Task.Delay(3000);

        _categoryRepository.Delete(DeleteCategoryId);
        LoadCategories();
        _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsLoading = false;
        StateHasChanged();
    }
}
