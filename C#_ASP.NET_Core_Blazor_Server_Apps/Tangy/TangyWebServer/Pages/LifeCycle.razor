@page "/learnBlazor/lifecycle"
@using System.Threading

<h3>Life Cycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary my-3" @onclick="IncrementCount">Click Me</button> <br/>

@Count <button @onclick=StartCountdown class="btn btn-outline-primary"> Start Countdown </button>

<_LifeCycleCild CountValue="@currentCount"></_LifeCycleCild>

@foreach(var item in EventType)
{
    @item
    <hr/>
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("Parent - OnInitialized() is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("Parent - OnInitializedAsync() is called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("Parent - OnParametersSet() is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("Parent - OnParametersSetAsync() is called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("Parent - OnAfterRender() is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("Parent - OnAfterRenderAsync() is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("Parent - ShouldRender() is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}